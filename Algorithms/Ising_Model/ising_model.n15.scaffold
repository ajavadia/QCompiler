/*
Input format:
N
Bx
Bz_0
Bz_1
...
Bz_N
J_{0,1}
J_{1,2}
...
J{n-2,n-1}
*/

#include <stdio.h>


const int N = 15;
const double Bx = 2;
// elements of Bz and J are randomly generated from uniform(-2, 2)
const double Bz[] = {-1.4172269684011476, -1.3411639348546744, 0.9691963843371552, -1.2564849258597688, 1.2457687720910142, 0.5312830206077295, 1.5936730149866274, -0.6487384553359514, -0.5142851330384399, 1.296956224607337, -0.9563951505453643, 1.4706553522461023, 1.0965812238171235, -0.18349136015854084, 1.7142449152144028};
const double J[] = {-0.08335648385301164, -0.6406465975030398, 1.6651889812673133, -1.7720232350521945, 0.574340018430926, 0.5793201219504365, -1.5864225398564016, 1.9476437911183777, 0.916854755503187, -1.496360720383302, 0.12672426691388727, 0.5211386307322985, 0.029679202072739663, -0.3585560575616986};

void CZ(qbit q1, qbit q2, double phi) {
    // printf("performing Controlled -2phi Z rotation\n");
    Rz(q2, -2.0*phi);
    CNOT(q1, q2);
    Rz(q2, phi);
    CNOT(q1, q2);
}

void ZcrossZ(qbit q1, qbit q2, double phi) {
    // printf("performing sigma_z cross sigma_z Hamiltonian\n");
    Rz(q1, phi);
    Rz(q2, -phi);
    CZ(q1, q2, -2.0*phi);
}


int main() {
    qbit reg[N];

    // Initialize all qubits to |+> state
    int n;
    for(n=0; n < N; n++) {
        PrepZ(reg[n], 0);
        H(reg[n]);
    }

    double T = 15;  // total duration of adiabatic evolution
    int M = 25;  // number of Trotter steps
    double dt = M / T;  // time per Trotter step

    int m;
    for(m = 1; m <= M; m++) {

        // Z-Z hamiltonian, executed in parallel
        for (n = 0; n < N-1; n += 2) {  // red pairs
            double phi = J[n] * (2.0*m - 1) / M;
            ZcrossZ(reg[n], reg[n + 1], phi);
        }
        for (n = 1; n < N-1; n += 2) {  // black pairs
            double phi = J[n] * (2.0*m - 1) / M;
            ZcrossZ(reg[n], reg[n + 1], phi);
        }

        double theta1 = (1.0 - (2.0*m-1)/M) * -2 * Bx * T / M;
        for (n = 0; n < N; n++) {
            H(reg[n]);
            Rz(reg[n], theta1);
            H(reg[n]);
        }

        // Bz hamiltonian
        for (n = 0; n < N; n++) {
            double theta2 = (1.0 - (2.0*m-1)/M) * -2 * Bz[n] * T / M;
            Rz(reg[n], theta2);
        }
    }


    for (n = 0; n < N; n++) {
        MeasZ(reg[0]);
    }

    return 0;
}
