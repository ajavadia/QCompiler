#include <math.h>

// a circuit of with=n^2 and length=n^4.
// average P parallelism at each depth.
// it has n^2/M unique modules. 
// each unique module is M deep.
// each unique module repeated n^2 times.
// Gates in module: M*P. Gates in total: n^4 * P.

#define n 3 // problem size
#define P 4 // parallelism factor
#define M 2 // module size

#define width n*n
#define depth (n*n*n*n)
#define repeat (n*n)
#define unique_depth (depth/repeat) // how many CNOT stages in the unique section

int const sd_pairs[unique_depth][2*P][2] =
{{{4,3},{7,8},{0,5},{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1}},
{{0,2},{5,7},{8,4},{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1}},
{{6,4},{1,2},{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1}},
{{8,7},{3,4},{2,6},{0,5},{-1,-1},{-1,-1},{-1,-1},{-1,-1}},
{{6,5},{4,7},{1,3},{2,8},{-1,-1},{-1,-1},{-1,-1},{-1,-1}},
{{2,3},{8,6},{4,0},{7,1},{-1,-1},{-1,-1},{-1,-1},{-1,-1}},
{{8,6},{0,1},{7,4},{5,3},{-1,-1},{-1,-1},{-1,-1},{-1,-1}},
{{3,4},{2,5},{7,1},{8,0},{-1,-1},{-1,-1},{-1,-1},{-1,-1}},
{{8,5},{3,2},{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1}}};

void syn_module (qbit reg[width], int j) {
  int k,l;
  for (l=0; l<M; l++)
    for (k=0; k<P; k++) {
      if (sd_pairs[j+l][k][0]!=-1 && sd_pairs[j+l][k][1]!=-1)
        CNOT(reg[sd_pairs[j+l][k][0]], reg[sd_pairs[j+l][k][1]]);
    }
}

int main() {
  
  qbit reg[width];  // qubit register (n^2 qubits)
  
  // initialize
  int i;
  for ( i = 0; i < width; i++ ) {
    PrepZ( reg[i], 0 );
  }

  int j, k;
  for ( k = 0; k < repeat; k++)  {
    for ( j = 0; j < unique_depth/M; j++ ) { // repeat n^2 times
      syn_module(reg, j);
    }
  }
  
  return 0;
}
