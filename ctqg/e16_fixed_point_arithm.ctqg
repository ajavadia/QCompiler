module
main_module(
  /* CTQG has no separete type for fixed point variables. Declare them as integers */
  /* and give the position of the fixed point at the time of instantiation.        */
  qint[32] x, qint[32] y, qint[32] z, 
  qbit b
) {  
  /* "[21] [11]" means treat the arguments as fixed point numbers with */
  /* 21 bits before the point and 11 bits after the point.             */

  $ y := 6434;  /* This is very close to  pi * 2048. */
  $ [21] [11] fxp_sin(x, y); /* x := sin(y) */
  $ [21] [11] fxp_cos(x, y); /* x := cos(y) */

  $ z := 5567;  /* This is very close to  e * 2048.  */
  $ [21] [11] fxp_ln(y, z);  /* y := natural_logarithm(z) */
  $ [21] [11] fxp_exp(x, y); /* x := e^y                  */

  $ [21] [11] fxp_inverse(x, y);   /* x := 1 / y                       */
  $ [21] [11] fxp_mult(x, y, z);   /* x := y * z                       */   
  $ [21] [11] fxp_floor(z);        /* z := (the greatest integer <= z) */
  $ [21] [11] fxp_abs(x);          /* x := |x|                         */  
  $ [21] [11] fxp_invert_sign(x);  /* x := -x                          */
  
  /* The result of comparisons, addition and substraction does not depend on  */
  /* whether or not a fixed point is present in the arguments. Use regular    */
  /* integer operators for these functions.                                   */
  $ b ^= x != y;
  $ b ^= x == y;
  $ b ^= x >= y;
  $ b ^= x > y;
  $ b ^= x <= y;
  $ b ^= x < y;
  $ x += y;
  $ x -= y;
}

/* //...
In case of an illegal operation on real numbers such as

  $ x := 0;
  $ [21] [11] fxp_ln(x);

CTQG still produces a valid reversible circuit which copmutes `x' to some
value which depends only on the name of the operation and the value of the argument.

*/
